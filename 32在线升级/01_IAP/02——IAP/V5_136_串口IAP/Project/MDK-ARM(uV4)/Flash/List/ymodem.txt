; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\ymodem.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\ymodem.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\fonts -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX ..\..\User\ymodem.c]
                          THUMB

                          AREA ||i.CalChecksum||, CODE, READONLY, ALIGN=1

                  CalChecksum PROC
;;;478    */
;;;479    uint8_t CalChecksum(const uint8_t* data, uint32_t size)
000000  b530              PUSH     {r4,r5,lr}
;;;480    {
000002  4602              MOV      r2,r0
;;;481      uint32_t sum = 0;
000004  2300              MOVS     r3,#0
;;;482      const uint8_t* dataEnd = data+size;
000006  1854              ADDS     r4,r2,r1
;;;483    
;;;484      while(data < dataEnd )
000008  e002              B        |L1.16|
                  |L1.10|
;;;485        sum += *data++;
00000a  f8125b01          LDRB     r5,[r2],#1
00000e  442b              ADD      r3,r3,r5
                  |L1.16|
000010  42a2              CMP      r2,r4                 ;484
000012  d3fa              BCC      |L1.10|
;;;486    
;;;487      return (sum & 0xffu);
000014  b2d8              UXTB     r0,r3
;;;488    }
000016  bd30              POP      {r4,r5,pc}
;;;489    
                          ENDP


                          AREA ||i.Cal_CRC16||, CODE, READONLY, ALIGN=1

                  Cal_CRC16 PROC
;;;455    */
;;;456    uint16_t Cal_CRC16(const uint8_t* data, uint32_t size)
000000  b5f0              PUSH     {r4-r7,lr}
;;;457    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;458    	uint32_t crc = 0;
000006  2400              MOVS     r4,#0
;;;459    	const uint8_t* dataEnd = data+size;
000008  19af              ADDS     r7,r5,r6
;;;460    
;;;461    	while(data < dataEnd)
00000a  e005              B        |L2.24|
                  |L2.12|
;;;462    		crc = UpdateCRC16(crc, *data++);
00000c  f8151b01          LDRB     r1,[r5],#1
000010  b2a0              UXTH     r0,r4
000012  f7fffffe          BL       UpdateCRC16
000016  4604              MOV      r4,r0
                  |L2.24|
000018  42bd              CMP      r5,r7                 ;461
00001a  d3f7              BCC      |L2.12|
;;;463    
;;;464    	crc = UpdateCRC16(crc, 0);
00001c  b2a0              UXTH     r0,r4
00001e  2100              MOVS     r1,#0
000020  f7fffffe          BL       UpdateCRC16
000024  4604              MOV      r4,r0
;;;465    	crc = UpdateCRC16(crc, 0);
000026  4620              MOV      r0,r4
000028  2100              MOVS     r1,#0
00002a  f7fffffe          BL       UpdateCRC16
00002e  4604              MOV      r4,r0
;;;466    
;;;467    	return crc&0xffffu;
000030  4620              MOV      r0,r4
;;;468    }
000032  bdf0              POP      {r4-r7,pc}
;;;469    
                          ENDP


                          AREA ||i.Receive_Byte||, CODE, READONLY, ALIGN=1

                  Receive_Byte PROC
;;;32     */
;;;33     static  int32_t Receive_Byte (uint8_t *c, uint32_t timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;34     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;35     	while (timeout-- > 0)
000006  e006              B        |L3.22|
                  |L3.8|
;;;36     	{
;;;37     		if (SerialKeyPressed(c) == 1)
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       SerialKeyPressed
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L3.22|
;;;38     		{
;;;39     			return 0;
000012  2000              MOVS     r0,#0
                  |L3.20|
;;;40     		}
;;;41     	}
;;;42     	
;;;43     	return -1;
;;;44     }
000014  bd70              POP      {r4-r6,pc}
                  |L3.22|
000016  0020              MOVS     r0,r4                 ;35
000018  f1a40401          SUB      r4,r4,#1              ;35
00001c  d1f4              BNE      |L3.8|
00001e  1e40              SUBS     r0,r0,#1              ;43
000020  e7f8              B        |L3.20|
;;;45     
                          ENDP


                          AREA ||i.Receive_Packet||, CODE, READONLY, ALIGN=1

                  Receive_Packet PROC
;;;73     */
;;;74     static int32_t Receive_Packet (uint8_t *data, int32_t *length, uint32_t timeout)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;75     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;76     	uint16_t i, packet_size;
;;;77     	uint8_t c;
;;;78     	*length = 0;
00000a  2000              MOVS     r0,#0
00000c  6028              STR      r0,[r5,#0]
;;;79     	
;;;80     	/* 接收一个字符 */
;;;81     	if (Receive_Byte(&c, timeout) != 0)
00000e  4641              MOV      r1,r8
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       Receive_Byte
000016  b118              CBZ      r0,|L4.32|
;;;82     	{
;;;83     		return -1;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L4.28|
;;;84     	}
;;;85     	
;;;86     	switch (c)
;;;87     	{
;;;88     		/* SOH表示数据区有128字节 */
;;;89     		case SOH:
;;;90     			packet_size = PACKET_SIZE;
;;;91     			break;
;;;92     		
;;;93     		/* STX表示数据区有1k字节 */
;;;94     		case STX:
;;;95     			packet_size = PACKET_1K_SIZE;
;;;96     			break;
;;;97     		
;;;98     		/* 传输结束 end of transmission */
;;;99     		case EOT:
;;;100    			return 0;
;;;101    		
;;;102    		/* 连续的两个CA信号终止传输 */
;;;103    		case CA:
;;;104    			/* 收到两个连续的CA信号 */
;;;105    			if ((Receive_Byte(&c, timeout) == 0) && (c == CA))
;;;106    			{
;;;107    				*length = -1;
;;;108    				return 0;
;;;109    			}
;;;110    			/* 只收到一个CA信号 */
;;;111    			else
;;;112    			{
;;;113    				return -1;
;;;114    			}
;;;115    		
;;;116    		/* 用户终止传输 */
;;;117    		case ABORT1:
;;;118    		case ABORT2:
;;;119    			return 1;
;;;120    		
;;;121    		default:
;;;122    			return -1;
;;;123    	}
;;;124    	
;;;125    	*data = c;
;;;126    	for (i = 1; i < (packet_size + PACKET_OVERHEAD); i ++)
;;;127    	{
;;;128    		if (Receive_Byte(data + i, timeout) != 0)
;;;129    		{
;;;130    			return -1;
;;;131    		}
;;;132    	}
;;;133    	
;;;134    	/* 第PACKET_SEQNO_COMP_INDEX（数字2）字节是PACKET_SEQNO_INDEX（数字1）字节的反码 */
;;;135    	if (data[PACKET_SEQNO_INDEX] != ((data[PACKET_SEQNO_COMP_INDEX] ^ 0xff) & 0xff))
;;;136    	{
;;;137    		return -1;
;;;138    	}
;;;139    	
;;;140    	/* 数据区长度 */
;;;141    	*length = packet_size;
;;;142    	return 0;
;;;143    }
00001c  e8bd83f8          POP      {r3-r9,pc}
                  |L4.32|
000020  f89d0000          LDRB     r0,[sp,#0]            ;86
000024  2818              CMP      r0,#0x18              ;86
000026  d013              BEQ      |L4.80|
000028  dc06              BGT      |L4.56|
00002a  2801              CMP      r0,#1                 ;86
00002c  d009              BEQ      |L4.66|
00002e  2802              CMP      r0,#2                 ;86
000030  d009              BEQ      |L4.70|
000032  2804              CMP      r0,#4                 ;86
000034  d120              BNE      |L4.120|
000036  e009              B        |L4.76|
                  |L4.56|
000038  2841              CMP      r0,#0x41              ;86
00003a  d01a              BEQ      |L4.114|
00003c  2861              CMP      r0,#0x61              ;86
00003e  d11b              BNE      |L4.120|
000040  e018              B        |L4.116|
                  |L4.66|
000042  2780              MOVS     r7,#0x80              ;90
000044  e01b              B        |L4.126|
                  |L4.70|
000046  f44f6780          MOV      r7,#0x400             ;95
00004a  e018              B        |L4.126|
                  |L4.76|
00004c  2000              MOVS     r0,#0                 ;100
00004e  e7e5              B        |L4.28|
                  |L4.80|
000050  4641              MOV      r1,r8                 ;105
000052  4668              MOV      r0,sp                 ;105
000054  f7fffffe          BL       Receive_Byte
000058  b940              CBNZ     r0,|L4.108|
00005a  f89d0000          LDRB     r0,[sp,#0]            ;105
00005e  2818              CMP      r0,#0x18              ;105
000060  d104              BNE      |L4.108|
000062  f04f30ff          MOV      r0,#0xffffffff        ;107
000066  6028              STR      r0,[r5,#0]            ;107
000068  2000              MOVS     r0,#0                 ;108
00006a  e7d7              B        |L4.28|
                  |L4.108|
00006c  f04f30ff          MOV      r0,#0xffffffff        ;113
000070  e7d4              B        |L4.28|
                  |L4.114|
000072  bf00              NOP                            ;118
                  |L4.116|
000074  2001              MOVS     r0,#1                 ;119
000076  e7d1              B        |L4.28|
                  |L4.120|
000078  f04f30ff          MOV      r0,#0xffffffff        ;122
00007c  e7ce              B        |L4.28|
                  |L4.126|
00007e  bf00              NOP                            ;91
000080  f89d0000          LDRB     r0,[sp,#0]            ;125
000084  7020              STRB     r0,[r4,#0]            ;125
000086  2601              MOVS     r6,#1                 ;126
000088  e009              B        |L4.158|
                  |L4.138|
00008a  19a0              ADDS     r0,r4,r6              ;128
00008c  4641              MOV      r1,r8                 ;128
00008e  f7fffffe          BL       Receive_Byte
000092  b110              CBZ      r0,|L4.154|
000094  f04f30ff          MOV      r0,#0xffffffff        ;130
000098  e7c0              B        |L4.28|
                  |L4.154|
00009a  1c70              ADDS     r0,r6,#1              ;126
00009c  b286              UXTH     r6,r0                 ;126
                  |L4.158|
00009e  1d78              ADDS     r0,r7,#5              ;126
0000a0  4286              CMP      r6,r0                 ;126
0000a2  dbf2              BLT      |L4.138|
0000a4  7861              LDRB     r1,[r4,#1]            ;135
0000a6  78a0              LDRB     r0,[r4,#2]            ;135
0000a8  f08000ff          EOR      r0,r0,#0xff           ;135
0000ac  4281              CMP      r1,r0                 ;135
0000ae  d002              BEQ      |L4.182|
0000b0  f04f30ff          MOV      r0,#0xffffffff        ;137
0000b4  e7b2              B        |L4.28|
                  |L4.182|
0000b6  602f              STR      r7,[r5,#0]            ;141
0000b8  2000              MOVS     r0,#0                 ;142
0000ba  e7af              B        |L4.28|
;;;144    
                          ENDP


                          AREA ||i.Send_Byte||, CODE, READONLY, ALIGN=1

                  Send_Byte PROC
;;;53     */
;;;54     static uint32_t Send_Byte (uint8_t c)
000000  b510              PUSH     {r4,lr}
;;;55     {
000002  4604              MOV      r4,r0
;;;56     	SerialPutChar(c);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       SerialPutChar
;;;57     	return 0;
00000a  2000              MOVS     r0,#0
;;;58     }
00000c  bd10              POP      {r4,pc}
;;;59     
                          ENDP


                          AREA ||i.UpdateCRC16||, CODE, READONLY, ALIGN=1

                  UpdateCRC16 PROC
;;;428    */
;;;429    uint16_t UpdateCRC16(uint16_t crcIn, uint8_t byte)
000000  b510              PUSH     {r4,lr}
;;;430    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;431      uint32_t crc = crcIn;
000006  4619              MOV      r1,r3
;;;432      uint32_t in = byte | 0x100;
000008  f4447280          ORR      r2,r4,#0x100
;;;433    
;;;434      do
00000c  bf00              NOP      
                  |L6.14|
;;;435      {
;;;436    	crc <<= 1;
00000e  0049              LSLS     r1,r1,#1
;;;437    	in <<= 1;
000010  0052              LSLS     r2,r2,#1
;;;438    	if(in & 0x100)
000012  f4027080          AND      r0,r2,#0x100
000016  b100              CBZ      r0,|L6.26|
;;;439    		++crc;
000018  1c49              ADDS     r1,r1,#1
                  |L6.26|
;;;440    	if(crc & 0x10000)
00001a  f4013080          AND      r0,r1,#0x10000
00001e  b110              CBZ      r0,|L6.38|
;;;441    		crc ^= 0x1021;
000020  f2410021          MOV      r0,#0x1021
000024  4041              EORS     r1,r1,r0
                  |L6.38|
;;;442      }while(!(in & 0x10000));
000026  f4023080          AND      r0,r2,#0x10000
00002a  2800              CMP      r0,#0
00002c  d0ef              BEQ      |L6.14|
;;;443    
;;;444      return crc & 0xffffu;
00002e  b288              UXTH     r0,r1
;;;445    }
000030  bd10              POP      {r4,pc}
;;;446    
                          ENDP


                          AREA ||i.Ymodem_CheckResponse||, CODE, READONLY, ALIGN=1

                  Ymodem_CheckResponse PROC
;;;318    */
;;;319    int32_t Ymodem_CheckResponse(uint8_t c)
000000  4601              MOV      r1,r0
;;;320    {
;;;321    	return 0;
000002  2000              MOVS     r0,#0
;;;322    }
000004  4770              BX       lr
;;;323    
                          ENDP


                          AREA ||i.Ymodem_PrepareIntialPacket||, CODE, READONLY, ALIGN=1

                  Ymodem_PrepareIntialPacket PROC
;;;333    */
;;;334    void Ymodem_PrepareIntialPacket(uint8_t *data, const uint8_t* fileName, uint32_t *length)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;335    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;336    	uint16_t i, j;
;;;337    	uint8_t file_ptr[10];
;;;338    
;;;339    	/* 第一包数据的前三个字符  */
;;;340    	data[0] = SOH; /* soh表示数据包是128字节 */
00000a  2001              MOVS     r0,#1
00000c  7028              STRB     r0,[r5,#0]
;;;341    	data[1] = 0x00;
00000e  2000              MOVS     r0,#0
000010  7068              STRB     r0,[r5,#1]
;;;342    	data[2] = 0xff;
000012  20ff              MOVS     r0,#0xff
000014  70a8              STRB     r0,[r5,#2]
;;;343    
;;;344    	/* 文件名 */
;;;345    	for (i = 0; (fileName[i] != '\0') && (i < FILE_NAME_LENGTH);i++)
000016  2400              MOVS     r4,#0
000018  e004              B        |L8.36|
                  |L8.26|
;;;346    	{
;;;347    		data[i + PACKET_HEADER] = fileName[i];
00001a  5d39              LDRB     r1,[r7,r4]
00001c  1ce0              ADDS     r0,r4,#3
00001e  5429              STRB     r1,[r5,r0]
000020  1c60              ADDS     r0,r4,#1              ;345
000022  b284              UXTH     r4,r0                 ;345
                  |L8.36|
000024  5d38              LDRB     r0,[r7,r4]            ;345
000026  b108              CBZ      r0,|L8.44|
000028  2cff              CMP      r4,#0xff              ;345
00002a  ddf6              BLE      |L8.26|
                  |L8.44|
;;;348    	}
;;;349    
;;;350    	data[i + PACKET_HEADER] = 0x00;
00002c  2100              MOVS     r1,#0
00002e  1ce0              ADDS     r0,r4,#3
000030  5429              STRB     r1,[r5,r0]
;;;351    
;;;352    	/* 文件大小转换成字符 */
;;;353    	Int2Str (file_ptr, *length);
000032  4668              MOV      r0,sp
000034  f8d81000          LDR      r1,[r8,#0]
000038  f7fffffe          BL       Int2Str
;;;354    	for (j =0, i = i + PACKET_HEADER + 1; file_ptr[j] != '\0' ; )
00003c  2600              MOVS     r6,#0
00003e  1d20              ADDS     r0,r4,#4
000040  b284              UXTH     r4,r0
000042  e008              B        |L8.86|
                  |L8.68|
;;;355    	{
;;;356    		data[i++] = file_ptr[j++];
000044  4630              MOV      r0,r6
000046  1c71              ADDS     r1,r6,#1
000048  b28e              UXTH     r6,r1
00004a  f81d2000          LDRB     r2,[sp,r0]
00004e  4620              MOV      r0,r4
000050  1c61              ADDS     r1,r4,#1
000052  b28c              UXTH     r4,r1
000054  542a              STRB     r2,[r5,r0]
                  |L8.86|
000056  f81d0006          LDRB     r0,[sp,r6]            ;354
00005a  2800              CMP      r0,#0                 ;354
00005c  d1f2              BNE      |L8.68|
;;;357    	}
;;;358    
;;;359    	/* 其余补0 */
;;;360    	for (j = i; j < PACKET_SIZE + PACKET_HEADER; j++)
00005e  4626              MOV      r6,r4
000060  e003              B        |L8.106|
                  |L8.98|
;;;361    	{
;;;362    		data[j] = 0;
000062  2000              MOVS     r0,#0
000064  55a8              STRB     r0,[r5,r6]
000066  1c70              ADDS     r0,r6,#1              ;360
000068  b286              UXTH     r6,r0                 ;360
                  |L8.106|
00006a  2e83              CMP      r6,#0x83              ;360
00006c  dbf9              BLT      |L8.98|
;;;363    	}
;;;364    }
00006e  e8bd83fe          POP      {r1-r9,pc}
;;;365    
                          ENDP


                          AREA ||i.Ymodem_PreparePacket||, CODE, READONLY, ALIGN=1

                  Ymodem_PreparePacket PROC
;;;376    */
;;;377    void Ymodem_PreparePacket(uint8_t *SourceBuf, uint8_t *data, uint8_t pktNo, uint32_t sizeBlk)
000000  b5f0              PUSH     {r4-r7,lr}
;;;378    {
000002  4607              MOV      r7,r0
000004  4614              MOV      r4,r2
000006  461d              MOV      r5,r3
;;;379    	uint16_t i, size, packetSize;
;;;380    	uint8_t* file_ptr;
;;;381    
;;;382    	/* 设置好要发送数据包的前三个字符data[0]，data[1]，data[2] */
;;;383    	/* 根据sizeBlk的大小设置数据区数据个数是取1024字节还是取128字节*/
;;;384    	packetSize = sizeBlk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
000008  f5b56f80          CMP      r5,#0x400
00000c  d302              BCC      |L9.20|
00000e  f44f6c80          MOV      r12,#0x400
000012  e001              B        |L9.24|
                  |L9.20|
000014  f04f0c80          MOV      r12,#0x80
                  |L9.24|
000018  4663              MOV      r3,r12
;;;385    	/* 数据大小进一步确定 */
;;;386    	size = sizeBlk < packetSize ? sizeBlk :packetSize;
00001a  429d              CMP      r5,r3
00001c  d201              BCS      |L9.34|
00001e  46ac              MOV      r12,r5
000020  e000              B        |L9.36|
                  |L9.34|
000022  469c              MOV      r12,r3
                  |L9.36|
000024  fa1ff28c          UXTH     r2,r12
;;;387    	
;;;388    	/* 首字节：确定是1024字节还是用128字节 */
;;;389    	if (packetSize == PACKET_1K_SIZE)
000028  f5b36f80          CMP      r3,#0x400
00002c  d104              BNE      |L9.56|
;;;390    	{
;;;391    		data[0] = STX;
00002e  f04f0c02          MOV      r12,#2
000032  f881c000          STRB     r12,[r1,#0]
000036  e003              B        |L9.64|
                  |L9.56|
;;;392    	}
;;;393    	else
;;;394    	{
;;;395    		data[0] = SOH;
000038  f04f0c01          MOV      r12,#1
00003c  f881c000          STRB     r12,[r1,#0]
                  |L9.64|
;;;396    	}
;;;397    	
;;;398    	/* 第2个字节：数据序号 */
;;;399    	data[1] = pktNo;
000040  704c              STRB     r4,[r1,#1]
;;;400    	/* 第3个字节：数据序号取反 */
;;;401    	data[2] = (~pktNo);
000042  ea6f0c04          MVN      r12,r4
000046  f881c002          STRB     r12,[r1,#2]
;;;402    	file_ptr = SourceBuf;
00004a  463e              MOV      r6,r7
;;;403    
;;;404    	/* 填充要发送的原始数据 */
;;;405    	for (i = PACKET_HEADER; i < size + PACKET_HEADER;i++)
00004c  2003              MOVS     r0,#3
00004e  e007              B        |L9.96|
                  |L9.80|
;;;406    	{
;;;407    		data[i] = *file_ptr++;
000050  f816cb01          LDRB     r12,[r6],#1
000054  f801c000          STRB     r12,[r1,r0]
000058  f1000c01          ADD      r12,r0,#1             ;405
00005c  fa1ff08c          UXTH     r0,r12                ;405
                  |L9.96|
000060  f1020c03          ADD      r12,r2,#3             ;405
000064  4560              CMP      r0,r12                ;405
000066  dbf3              BLT      |L9.80|
;;;408    	}
;;;409    	
;;;410    	/* 不足的补 EOF (0x1A) 或 0x00 */
;;;411    	if ( size  <= packetSize)
000068  429a              CMP      r2,r3
00006a  dc0e              BGT      |L9.138|
;;;412    	{
;;;413    		for (i = size + PACKET_HEADER; i < packetSize + PACKET_HEADER; i++)
00006c  fa1ff08c          UXTH     r0,r12
000070  e007              B        |L9.130|
                  |L9.114|
;;;414    		{
;;;415    			data[i] = 0x1A; /* EOF (0x1A) or 0x00 */
000072  f04f0c1a          MOV      r12,#0x1a
000076  f801c000          STRB     r12,[r1,r0]
00007a  f1000c01          ADD      r12,r0,#1             ;413
00007e  fa1ff08c          UXTH     r0,r12                ;413
                  |L9.130|
000082  f1030c03          ADD      r12,r3,#3             ;413
000086  4560              CMP      r0,r12                ;413
000088  dbf3              BLT      |L9.114|
                  |L9.138|
;;;416    		}
;;;417    	}
;;;418    }
00008a  bdf0              POP      {r4-r7,pc}
;;;419    
                          ENDP


                          AREA ||i.Ymodem_Receive||, CODE, READONLY, ALIGN=2

                  Ymodem_Receive PROC
;;;152    */
;;;153    int32_t Ymodem_Receive (uint8_t *buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;154    {
000004  f2ad4d34          SUB      sp,sp,#0x434
000008  4606              MOV      r6,r0
;;;155    	uint8_t packet_data[PACKET_1K_SIZE + PACKET_OVERHEAD], file_size[FILE_SIZE_LENGTH], *file_ptr, *buf_ptr;
;;;156    	int32_t i, packet_length, session_done, file_done, packets_received, errors, session_begin, size = 0;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;157    	uint32_t flashdestination, ramsource;
;;;158    
;;;159    	/* 初始化flash编程首地址 */
;;;160    	flashdestination = APPLICATION_ADDRESS;
00000e  486b              LDR      r0,|L10.444|
000010  9001              STR      r0,[sp,#4]
;;;161    
;;;162    	/* 接收数据并进行flash编程 */
;;;163    	for (session_done = 0, errors = 0, session_begin = 0; ;)
000012  2000              MOVS     r0,#0
000014  9005              STR      r0,[sp,#0x14]
000016  4681              MOV      r9,r0
000018  9003              STR      r0,[sp,#0xc]
00001a  bf00              NOP      
                  |L10.28|
;;;164    	{
;;;165    		for (packets_received = 0, file_done = 0, buf_ptr = buf; ;)
00001c  2700              MOVS     r7,#0
00001e  2000              MOVS     r0,#0
000020  9004              STR      r0,[sp,#0x10]
000022  46b0              MOV      r8,r6
000024  bf00              NOP      
                  |L10.38|
;;;166    		{
;;;167    			switch (Receive_Packet(packet_data, &packet_length, NAK_TIMEOUT))
000026  f44f1280          MOV      r2,#0x100000
00002a  a906              ADD      r1,sp,#0x18
00002c  a80b              ADD      r0,sp,#0x2c
00002e  f7fffffe          BL       Receive_Packet
000032  b110              CBZ      r0,|L10.58|
000034  2801              CMP      r0,#1
000036  d17d              BNE      |L10.308|
000038  e094              B        |L10.356|
                  |L10.58|
;;;168    			{
;;;169    				/* 返回0表示接收成功 */
;;;170    				case 0:
;;;171    					errors = 0;
00003a  f04f0900          MOV      r9,#0
;;;172    					switch (packet_length)
00003e  9806              LDR      r0,[sp,#0x18]
000040  f1b03fff          CMP      r0,#0xffffffff
000044  d001              BEQ      |L10.74|
000046  b970              CBNZ     r0,|L10.102|
000048  e007              B        |L10.90|
                  |L10.74|
;;;173    					{
;;;174    						/* 发送端终止传输 */
;;;175    						case - 1:
;;;176    							Send_Byte(ACK);
00004a  2006              MOVS     r0,#6
00004c  f7fffffe          BL       Send_Byte
;;;177    							return 0;
000050  2000              MOVS     r0,#0
                  |L10.82|
;;;178    						
;;;179    						/* 传输结束 */
;;;180    						case 0:
;;;181    							Send_Byte(ACK);
;;;182    							file_done = 1;
;;;183    							break;
;;;184    						
;;;185    						/* 接收数据 */
;;;186    						default:
;;;187    							
;;;188    							if ((packet_data[PACKET_SEQNO_INDEX] & 0xff) != (packets_received & 0xff))
;;;189    							{
;;;190    								Send_Byte(NAK);
;;;191    							}
;;;192    							
;;;193    							else
;;;194    							{
;;;195    								if (packets_received == 0)
;;;196    								{
;;;197    									/* 文件名数据包 */
;;;198    									if (packet_data[PACKET_HEADER] != 0)
;;;199    									{
;;;200    										/* 读取文件名 */
;;;201    										for (i = 0, file_ptr = packet_data + PACKET_HEADER; (*file_ptr != 0) && (i < FILE_NAME_LENGTH);)
;;;202    										{
;;;203    											FileName[i++] = *file_ptr++;
;;;204    										}
;;;205    										/* 文件名末尾加结束符 */
;;;206    										FileName[i++] = '\0';
;;;207    										
;;;208    										/* 读取文件大小 */
;;;209    										for (i = 0, file_ptr ++; (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH);)
;;;210    										{
;;;211    											file_size[i++] = *file_ptr++;
;;;212    										}
;;;213    										file_size[i++] = '\0';
;;;214    										
;;;215    										/* 将文件大小的字符串转换成整型数据 */
;;;216    										Str2Int(file_size, &size);
;;;217    
;;;218    										/* 检测文件大小是否比flash空间大 */
;;;219    										if (size > (USER_FLASH_SIZE + 1))
;;;220    										{
;;;221    											/* 终止传输 */
;;;222    											Send_Byte(CA);
;;;223    											Send_Byte(CA);
;;;224    											return -1;
;;;225    										}
;;;226    										
;;;227    										/* 擦除用户区flash */
;;;228    										FLASH_If_Erase(APPLICATION_ADDRESS);
;;;229    										Send_Byte(ACK);
;;;230    										Send_Byte(CRC16);
;;;231    									}
;;;232    									
;;;233    									/* 文件名数据包处理完，终止此部分，开始接收数据 */
;;;234    									else
;;;235    									{
;;;236    										Send_Byte(ACK);
;;;237    										file_done = 1;
;;;238    										session_done = 1;
;;;239    										break;
;;;240    									}
;;;241    								}
;;;242    								
;;;243    								/* 数据包 */
;;;244    								else
;;;245    								{
;;;246    									/* 读取数据 */
;;;247    									memcpy(buf_ptr, packet_data + PACKET_HEADER, packet_length);
;;;248    									ramsource = (uint32_t)buf;
;;;249    									
;;;250    									//if(bsp_WriteCpuFlash(flashdestination, (uint8_t*) ramsource, packet_length)==0)
;;;251    									/* 将接收到的数据编程到flash */
;;;252    									if (FLASH_If_Write(&flashdestination, (uint32_t*) ramsource, (uint16_t) packet_length/4)  == 0)
;;;253    									{
;;;254    										Send_Byte(ACK);
;;;255    									}
;;;256    									/* 编程过程中产生错误 */
;;;257    									else 
;;;258    									{
;;;259    										/* 终止传输 */
;;;260    										Send_Byte(CA);
;;;261    										Send_Byte(CA);
;;;262    										return -2;
;;;263    									}
;;;264    								}
;;;265    								/* 接收数据包递增 */
;;;266    								packets_received ++;
;;;267    								session_begin = 1;
;;;268    							}
;;;269    					}
;;;270    					break;
;;;271    				
;;;272    				/* 用户终止传输 */
;;;273    				case 1:
;;;274    					Send_Byte(CA);
;;;275    					Send_Byte(CA);
;;;276    					return -3;
;;;277    				
;;;278    				/* 其它 */
;;;279    				default:
;;;280    					if (session_begin > 0)
;;;281    					{
;;;282    						errors ++;
;;;283    					}
;;;284    					
;;;285    					if (errors > MAX_ERRORS)
;;;286    					{
;;;287    						Send_Byte(CA);
;;;288    						Send_Byte(CA);
;;;289    						return 0;
;;;290    					}
;;;291    					
;;;292    					Send_Byte(CRC16);
;;;293    					break;
;;;294    			}
;;;295    			
;;;296    			if (file_done != 0)
;;;297    			{
;;;298    				break;
;;;299    			}
;;;300    		}
;;;301    		
;;;302    		if (session_done != 0)
;;;303    		{
;;;304    			break;
;;;305    		}
;;;306    	}
;;;307    	
;;;308    	return (int32_t)size;
;;;309    }
000052  f20d4d34          ADD      sp,sp,#0x434
000056  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.90|
00005a  2006              MOVS     r0,#6                 ;181
00005c  f7fffffe          BL       Send_Byte
000060  2001              MOVS     r0,#1                 ;182
000062  9004              STR      r0,[sp,#0x10]         ;182
000064  e07c              B        |L10.352|
                  |L10.102|
000066  f89d002d          LDRB     r0,[sp,#0x2d]         ;188
00006a  b2f9              UXTB     r1,r7                 ;188
00006c  4288              CMP      r0,r1                 ;188
00006e  d003              BEQ      |L10.120|
000070  2015              MOVS     r0,#0x15              ;190
000072  f7fffffe          BL       Send_Byte
000076  e073              B        |L10.352|
                  |L10.120|
000078  2f00              CMP      r7,#0                 ;195
00007a  d14b              BNE      |L10.276|
00007c  f89d002f          LDRB     r0,[sp,#0x2f]         ;198
000080  2800              CMP      r0,#0                 ;198
000082  d040              BEQ      |L10.262|
000084  2500              MOVS     r5,#0                 ;201
000086  f10d042f          ADD      r4,sp,#0x2f           ;201
00008a  e005              B        |L10.152|
                  |L10.140|
00008c  f8142b01          LDRB     r2,[r4],#1            ;203
000090  4628              MOV      r0,r5                 ;203
000092  1c6d              ADDS     r5,r5,#1              ;203
000094  494a              LDR      r1,|L10.448|
000096  540a              STRB     r2,[r1,r0]            ;203
                  |L10.152|
000098  7820              LDRB     r0,[r4,#0]            ;201
00009a  b108              CBZ      r0,|L10.160|
00009c  2dff              CMP      r5,#0xff              ;201
00009e  ddf5              BLE      |L10.140|
                  |L10.160|
0000a0  2200              MOVS     r2,#0                 ;206
0000a2  4628              MOV      r0,r5                 ;206
0000a4  1c6d              ADDS     r5,r5,#1              ;206
0000a6  4946              LDR      r1,|L10.448|
0000a8  540a              STRB     r2,[r1,r0]            ;206
0000aa  2500              MOVS     r5,#0                 ;209
0000ac  1c64              ADDS     r4,r4,#1              ;209
0000ae  e005              B        |L10.188|
                  |L10.176|
0000b0  f8142b01          LDRB     r2,[r4],#1            ;211
0000b4  4628              MOV      r0,r5                 ;211
0000b6  1c6d              ADDS     r5,r5,#1              ;211
0000b8  a907              ADD      r1,sp,#0x1c           ;211
0000ba  540a              STRB     r2,[r1,r0]            ;211
                  |L10.188|
0000bc  7820              LDRB     r0,[r4,#0]            ;209
0000be  2820              CMP      r0,#0x20              ;209
0000c0  d001              BEQ      |L10.198|
0000c2  2d10              CMP      r5,#0x10              ;209
0000c4  dbf4              BLT      |L10.176|
                  |L10.198|
0000c6  2200              MOVS     r2,#0                 ;213
0000c8  4628              MOV      r0,r5                 ;213
0000ca  1c6d              ADDS     r5,r5,#1              ;213
0000cc  a907              ADD      r1,sp,#0x1c           ;213
0000ce  540a              STRB     r2,[r1,r0]            ;213
0000d0  a902              ADD      r1,sp,#8              ;216
0000d2  a807              ADD      r0,sp,#0x1c           ;216
0000d4  f7fffffe          BL       Str2Int
0000d8  493a              LDR      r1,|L10.452|
0000da  9802              LDR      r0,[sp,#8]            ;219
0000dc  4288              CMP      r0,r1                 ;219
0000de  d908              BLS      |L10.242|
0000e0  2018              MOVS     r0,#0x18              ;222
0000e2  f7fffffe          BL       Send_Byte
0000e6  2018              MOVS     r0,#0x18              ;223
0000e8  f7fffffe          BL       Send_Byte
0000ec  f04f30ff          MOV      r0,#0xffffffff        ;224
0000f0  e7af              B        |L10.82|
                  |L10.242|
0000f2  4832              LDR      r0,|L10.444|
0000f4  f7fffffe          BL       FLASH_If_Erase
0000f8  2006              MOVS     r0,#6                 ;229
0000fa  f7fffffe          BL       Send_Byte
0000fe  2043              MOVS     r0,#0x43              ;230
000100  f7fffffe          BL       Send_Byte
000104  e029              B        |L10.346|
                  |L10.262|
000106  2006              MOVS     r0,#6                 ;236
000108  f7fffffe          BL       Send_Byte
00010c  2001              MOVS     r0,#1                 ;237
00010e  9004              STR      r0,[sp,#0x10]         ;237
000110  9005              STR      r0,[sp,#0x14]         ;238
000112  e025              B        |L10.352|
                  |L10.276|
000114  f10d012f          ADD      r1,sp,#0x2f           ;247
000118  4640              MOV      r0,r8                 ;247
00011a  9a06              LDR      r2,[sp,#0x18]         ;247
00011c  f7fffffe          BL       __aeabi_memcpy
000120  46b2              MOV      r10,r6                ;248
000122  9806              LDR      r0,[sp,#0x18]         ;252
000124  fa1ffb80          UXTH     r11,r0                ;252
000128  ea4f70eb          ASR      r0,r11,#31            ;252
00012c  eb0b7090          ADD      r0,r11,r0,LSR #30     ;252
000130  1082              ASRS     r2,r0,#2              ;252
000132  e000              B        |L10.310|
                  |L10.308|
000134  e01f              B        |L10.374|
                  |L10.310|
000136  4651              MOV      r1,r10                ;252
000138  a801              ADD      r0,sp,#4              ;252
00013a  f7fffffe          BL       FLASH_If_Write
00013e  b918              CBNZ     r0,|L10.328|
000140  2006              MOVS     r0,#6                 ;254
000142  f7fffffe          BL       Send_Byte
000146  e008              B        |L10.346|
                  |L10.328|
000148  2018              MOVS     r0,#0x18              ;260
00014a  f7fffffe          BL       Send_Byte
00014e  2018              MOVS     r0,#0x18              ;261
000150  f7fffffe          BL       Send_Byte
000154  f06f0001          MVN      r0,#1                 ;262
000158  e77b              B        |L10.82|
                  |L10.346|
00015a  1c7f              ADDS     r7,r7,#1              ;266
00015c  2001              MOVS     r0,#1                 ;267
00015e  9003              STR      r0,[sp,#0xc]          ;267
                  |L10.352|
000160  bf00              NOP                            ;183
000162  e01c              B        |L10.414|
                  |L10.356|
000164  2018              MOVS     r0,#0x18              ;274
000166  f7fffffe          BL       Send_Byte
00016a  2018              MOVS     r0,#0x18              ;275
00016c  f7fffffe          BL       Send_Byte
000170  f06f0002          MVN      r0,#2                 ;276
000174  e76d              B        |L10.82|
                  |L10.374|
000176  9803              LDR      r0,[sp,#0xc]          ;280
000178  2800              CMP      r0,#0                 ;280
00017a  dd01              BLE      |L10.384|
00017c  f1090901          ADD      r9,r9,#1              ;282
                  |L10.384|
000180  f1b90f05          CMP      r9,#5                 ;285
000184  dd07              BLE      |L10.406|
000186  2018              MOVS     r0,#0x18              ;287
000188  f7fffffe          BL       Send_Byte
00018c  2018              MOVS     r0,#0x18              ;288
00018e  f7fffffe          BL       Send_Byte
000192  2000              MOVS     r0,#0                 ;289
000194  e75d              B        |L10.82|
                  |L10.406|
000196  2043              MOVS     r0,#0x43              ;292
000198  f7fffffe          BL       Send_Byte
00019c  bf00              NOP                            ;293
                  |L10.414|
00019e  bf00              NOP                            ;270
0001a0  9804              LDR      r0,[sp,#0x10]         ;296
0001a2  2800              CMP      r0,#0                 ;296
0001a4  f43faf3f          BEQ      |L10.38|
0001a8  bf00              NOP                            ;298
0001aa  bf00              NOP                            ;298
0001ac  9805              LDR      r0,[sp,#0x14]         ;302
0001ae  2800              CMP      r0,#0                 ;302
0001b0  f43faf34          BEQ      |L10.28|
0001b4  bf00              NOP                            ;304
0001b6  bf00              NOP                            ;304
0001b8  9802              LDR      r0,[sp,#8]            ;308
0001ba  e74a              B        |L10.82|
;;;310    
                          ENDP

                  |L10.444|
                          DCD      0x08010000
                  |L10.448|
                          DCD      FileName
                  |L10.452|
                          DCD      0x000f0001

                          AREA ||i.Ymodem_SendPacket||, CODE, READONLY, ALIGN=1

                  Ymodem_SendPacket PROC
;;;498    */
;;;499    void Ymodem_SendPacket(uint8_t *data, uint16_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;500    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;501    	uint16_t i;
;;;502    	i = 0;
000006  2400              MOVS     r4,#0
;;;503    	
;;;504    	while (i < length)
000008  e004              B        |L11.20|
                  |L11.10|
;;;505    	{
;;;506    		Send_Byte(data[i]);
00000a  5d28              LDRB     r0,[r5,r4]
00000c  f7fffffe          BL       Send_Byte
;;;507    		i++;
000010  1c60              ADDS     r0,r4,#1
000012  b284              UXTH     r4,r0
                  |L11.20|
000014  42b4              CMP      r4,r6                 ;504
000016  dbf8              BLT      |L11.10|
;;;508    	}
;;;509    }
000018  bd70              POP      {r4-r6,pc}
;;;510    
                          ENDP


                          AREA ||i.Ymodem_Transmit||, CODE, READONLY, ALIGN=2

                  Ymodem_Transmit PROC
;;;520    */
;;;521    uint8_t Ymodem_Transmit (uint8_t *buf, const uint8_t* sendFileName, uint32_t sizeFile)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;522    {
000004  f5ad6da3          SUB      sp,sp,#0x518
;;;523      
;;;524    	uint8_t packet_data[PACKET_1K_SIZE + PACKET_OVERHEAD];
;;;525    	uint8_t filename[FILE_NAME_LENGTH];
;;;526    	uint8_t *buf_ptr, tempCheckSum;
;;;527    	uint16_t tempCRC;
;;;528    	uint16_t blkNumber;
;;;529    	uint8_t receivedC[2], CRC16_F = 0, i;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;530    	uint32_t errors, ackReceived, size = 0, pktSize;
00000c  4681              MOV      r9,r0
;;;531    
;;;532    	errors = 0;
00000e  2400              MOVS     r4,#0
;;;533    	ackReceived = 0;
000010  4680              MOV      r8,r0
;;;534    	for (i = 0; i < (FILE_NAME_LENGTH - 1); i++)
000012  2600              MOVS     r6,#0
000014  e006              B        |L12.36|
                  |L12.22|
;;;535    	{
;;;536    		filename[i] = sendFileName[i];
000016  f8dd051c          LDR      r0,[sp,#0x51c]
00001a  5d80              LDRB     r0,[r0,r6]
00001c  a904              ADD      r1,sp,#0x10
00001e  5588              STRB     r0,[r1,r6]
000020  1c70              ADDS     r0,r6,#1              ;534
000022  b2c6              UXTB     r6,r0                 ;534
                  |L12.36|
000024  2eff              CMP      r6,#0xff              ;534
000026  dbf6              BLT      |L12.22|
;;;537    	}
;;;538    	CRC16_F = 1;
000028  2001              MOVS     r0,#1
00002a  9001              STR      r0,[sp,#4]
;;;539    
;;;540    	/* 初始化要发送的第一个数据包 */
;;;541    	Ymodem_PrepareIntialPacket(&packet_data[0], filename, &sizeFile);
00002c  f50d62a4          ADD      r2,sp,#0x520
000030  a904              ADD      r1,sp,#0x10
000032  a844              ADD      r0,sp,#0x110
000034  f7fffffe          BL       Ymodem_PrepareIntialPacket
;;;542      
;;;543    	do 
000038  bf00              NOP      
                  |L12.58|
;;;544    	{
;;;545    		/* 发送数据包 */
;;;546    		Ymodem_SendPacket(packet_data, PACKET_SIZE + PACKET_HEADER);
00003a  2183              MOVS     r1,#0x83
00003c  a844              ADD      r0,sp,#0x110
00003e  f7fffffe          BL       Ymodem_SendPacket
;;;547    
;;;548    		/* 根据CRC16_F发送CRC或者求和进行校验 */
;;;549    		if (CRC16_F)
000042  9801              LDR      r0,[sp,#4]
000044  b160              CBZ      r0,|L12.96|
;;;550    		{
;;;551    			tempCRC = Cal_CRC16(&packet_data[3], PACKET_SIZE);
000046  2180              MOVS     r1,#0x80
000048  f20d1013          ADD      r0,sp,#0x113
00004c  f7fffffe          BL       Cal_CRC16
000050  4605              MOV      r5,r0
;;;552    			Send_Byte(tempCRC >> 8);
000052  1228              ASRS     r0,r5,#8
000054  f7fffffe          BL       Send_Byte
;;;553    			Send_Byte(tempCRC & 0xFF);
000058  b2e8              UXTB     r0,r5
00005a  f7fffffe          BL       Send_Byte
00005e  e008              B        |L12.114|
                  |L12.96|
;;;554    		}
;;;555    		else
;;;556    		{
;;;557    			tempCheckSum = CalChecksum (&packet_data[3], PACKET_SIZE);
000060  2180              MOVS     r1,#0x80
000062  f20d1013          ADD      r0,sp,#0x113
000066  f7fffffe          BL       CalChecksum
00006a  9003              STR      r0,[sp,#0xc]
;;;558    			Send_Byte(tempCheckSum);
00006c  9803              LDR      r0,[sp,#0xc]
00006e  f7fffffe          BL       Send_Byte
                  |L12.114|
;;;559    		}
;;;560      
;;;561    		/* 等待 Ack 和字符 'C' */
;;;562    		if (Receive_Byte(&receivedC[0], 10000) == 0)  
000072  f2427110          MOV      r1,#0x2710
000076  a802              ADD      r0,sp,#8
000078  f7fffffe          BL       Receive_Byte
00007c  b930              CBNZ     r0,|L12.140|
;;;563    		{
;;;564    			if (receivedC[0] == ACK)
00007e  f89d0008          LDRB     r0,[sp,#8]
000082  2806              CMP      r0,#6
000084  d103              BNE      |L12.142|
;;;565    			{ 
;;;566    				/* 接收到应答 */
;;;567    				ackReceived = 1;
000086  f04f0801          MOV      r8,#1
00008a  e000              B        |L12.142|
                  |L12.140|
;;;568    			}
;;;569    		}
;;;570    		/* 没有等到 */
;;;571    		else
;;;572    		{
;;;573    			errors++;
00008c  1c64              ADDS     r4,r4,#1
                  |L12.142|
;;;574    		}
;;;575    	/* 发送数据包后接收到应答或者没有等到就推出 */
;;;576    	}while (!ackReceived && (errors < 0x0A));
00008e  f1b80f00          CMP      r8,#0
000092  d101              BNE      |L12.152|
000094  2c0a              CMP      r4,#0xa
000096  d3d0              BCC      |L12.58|
                  |L12.152|
;;;577      
;;;578    	/* 超过最大错误次数就退出 */
;;;579    	if (errors >=  0x0A)
000098  2c0a              CMP      r4,#0xa
00009a  d304              BCC      |L12.166|
;;;580    	{
;;;581    		return errors;
00009c  b2e0              UXTB     r0,r4
                  |L12.158|
;;;582    	}
;;;583    	
;;;584    	buf_ptr = buf;
;;;585    	size = sizeFile;
;;;586    	blkNumber = 0x01;
;;;587    	
;;;588    	/* 下面使用的是发送1024字节数据包 */
;;;589    	/* Resend packet if NAK  for a count of 10 else end of communication */
;;;590    	while (size)
;;;591    	{
;;;592    		/* 准备下一包数据 */
;;;593    		Ymodem_PreparePacket(buf_ptr, &packet_data[0], blkNumber, size);
;;;594    		ackReceived = 0;
;;;595    		receivedC[0]= 0;
;;;596    		errors = 0;
;;;597    		do
;;;598    		{
;;;599    			/* 发送下一包数据 */
;;;600    			if (size >= PACKET_1K_SIZE)
;;;601    			{
;;;602    				pktSize = PACKET_1K_SIZE;
;;;603    			}
;;;604    			else
;;;605    			{
;;;606    				pktSize = PACKET_SIZE;
;;;607    			}
;;;608    			
;;;609    			Ymodem_SendPacket(packet_data, pktSize + PACKET_HEADER);
;;;610    			
;;;611    			/* 根据CRC16_F发送CRC校验或者求和的结果 */
;;;612    			if (CRC16_F)
;;;613    			{
;;;614    				tempCRC = Cal_CRC16(&packet_data[3], pktSize);
;;;615    				Send_Byte(tempCRC >> 8);
;;;616    				Send_Byte(tempCRC & 0xFF);
;;;617    			}
;;;618    			else
;;;619    			{
;;;620    				tempCheckSum = CalChecksum (&packet_data[3], pktSize);
;;;621    				Send_Byte(tempCheckSum);
;;;622    			}
;;;623    
;;;624    			/* 等到Ack信号 */
;;;625    			if ((Receive_Byte(&receivedC[0], 100000) == 0)  && (receivedC[0] == ACK))
;;;626    			{
;;;627    				ackReceived = 1; 
;;;628    				/* 修改buf_ptr位置以及size大小，准备发送下一包数据 */
;;;629    				if (size > pktSize)
;;;630    				{
;;;631    					buf_ptr += pktSize;  
;;;632    					size -= pktSize;
;;;633    					if (blkNumber == (USER_FLASH_SIZE/1024))
;;;634    					{
;;;635    						return 0xFF; /* 错误 */
;;;636    					}
;;;637    					else
;;;638    					{
;;;639    						blkNumber++;
;;;640    					}
;;;641    				}
;;;642    				else
;;;643    				{
;;;644    					buf_ptr += pktSize;
;;;645    					size = 0;
;;;646    				}
;;;647    			}
;;;648    			else
;;;649    			{
;;;650    				errors++;
;;;651    			}
;;;652    			
;;;653    		}while(!ackReceived && (errors < 0x0A));
;;;654    		
;;;655    		/* 超过10次没有收到应答就退出 */
;;;656    		if (errors >=  0x0A)
;;;657    		{
;;;658    			return errors;
;;;659    		} 
;;;660    	}
;;;661    	
;;;662    	ackReceived = 0;
;;;663    	receivedC[0] = 0x00;
;;;664    	errors = 0;
;;;665    	do 
;;;666    	{
;;;667    		Send_Byte(EOT);
;;;668    		
;;;669    		/* 发送EOT信号 */
;;;670    		/* 等待Ack应答 */
;;;671    		if ((Receive_Byte(&receivedC[0], 10000) == 0)  && receivedC[0] == ACK)
;;;672    		{
;;;673    			ackReceived = 1;  
;;;674    		}
;;;675    		else
;;;676    		{
;;;677    			errors++;
;;;678    		}
;;;679    		
;;;680    	}while (!ackReceived && (errors < 0x0A));
;;;681        
;;;682    	/* 超过10次没有收到应答就退出 */
;;;683    	if (errors >=  0x0A)
;;;684    	{
;;;685    		return errors;
;;;686    	}
;;;687      
;;;688    	/* 初始化最后一包要发送的数据 */
;;;689    	ackReceived = 0;
;;;690    	receivedC[0] = 0x00;
;;;691    	errors = 0;
;;;692    
;;;693    	packet_data[0] = SOH;
;;;694    	packet_data[1] = 0;
;;;695    	packet_data [2] = 0xFF;
;;;696    
;;;697    	/* 数据包的数据部分全部初始化为0 */
;;;698    	for (i = PACKET_HEADER; i < (PACKET_SIZE + PACKET_HEADER); i++)
;;;699    	{
;;;700    		packet_data [i] = 0x00;
;;;701    	}
;;;702      
;;;703    	do 
;;;704    	{
;;;705    		/* 发送数据包 */
;;;706    		Ymodem_SendPacket(packet_data, PACKET_SIZE + PACKET_HEADER);
;;;707    
;;;708    		/* 根据CRC16_F发送CRC校验或者求和的结果 */
;;;709    		tempCRC = Cal_CRC16(&packet_data[3], PACKET_SIZE);
;;;710    		Send_Byte(tempCRC >> 8);
;;;711    		Send_Byte(tempCRC & 0xFF);
;;;712    
;;;713    		/* 等待 Ack 和字符 'C' */
;;;714    		if (Receive_Byte(&receivedC[0], 10000) == 0)  
;;;715    		{
;;;716    			if (receivedC[0] == ACK)
;;;717    			{ 
;;;718    				/* 数据包发送成功 */
;;;719    				ackReceived = 1;
;;;720    			}
;;;721    		}
;;;722    		else
;;;723    		{
;;;724    			errors++;
;;;725    		}
;;;726    	}while (!ackReceived && (errors < 0x0A));
;;;727    
;;;728    	/* 超过10次没有收到应答就退出 */
;;;729    	if (errors >=  0x0A)
;;;730    	{
;;;731    		return errors;
;;;732    	}  
;;;733      
;;;734    	do 
;;;735    	{
;;;736    		Send_Byte(EOT);
;;;737    		/* 发送EOT信号 */
;;;738    		/* 等待Ack应答 */
;;;739    		if ((Receive_Byte(&receivedC[0], 10000) == 0)  && receivedC[0] == ACK)
;;;740    		{
;;;741    			ackReceived = 1;  
;;;742    		}
;;;743    		else
;;;744    		{
;;;745    			errors++;
;;;746    		}
;;;747    	}while (!ackReceived && (errors < 0x0A));
;;;748    
;;;749    	if (errors >=  0x0A)
;;;750    	{
;;;751    		return errors;
;;;752    	}
;;;753    	return 0; /* 文件发送成功 */
;;;754    }
00009e  f20d5d24          ADD      sp,sp,#0x524
0000a2  e8bd8ff0          POP      {r4-r11,pc}
                  |L12.166|
0000a6  f8ddb518          LDR      r11,[sp,#0x518]       ;584
0000aa  f8dd9520          LDR      r9,[sp,#0x520]        ;585
0000ae  f04f0a01          MOV      r10,#1                ;586
0000b2  e059              B        |L12.360|
                  |L12.180|
0000b4  f00a02ff          AND      r2,r10,#0xff          ;593
0000b8  464b              MOV      r3,r9                 ;593
0000ba  a944              ADD      r1,sp,#0x110          ;593
0000bc  4658              MOV      r0,r11                ;593
0000be  f7fffffe          BL       Ymodem_PreparePacket
0000c2  f04f0800          MOV      r8,#0                 ;594
0000c6  2000              MOVS     r0,#0                 ;595
0000c8  f88d0008          STRB     r0,[sp,#8]            ;595
0000cc  2400              MOVS     r4,#0                 ;596
0000ce  bf00              NOP                            ;597
                  |L12.208|
0000d0  f5b96f80          CMP      r9,#0x400             ;600
0000d4  d302              BCC      |L12.220|
0000d6  f44f6780          MOV      r7,#0x400             ;602
0000da  e000              B        |L12.222|
                  |L12.220|
0000dc  2780              MOVS     r7,#0x80              ;606
                  |L12.222|
0000de  1cf8              ADDS     r0,r7,#3              ;609
0000e0  b281              UXTH     r1,r0                 ;609
0000e2  a844              ADD      r0,sp,#0x110          ;609
0000e4  f7fffffe          BL       Ymodem_SendPacket
0000e8  9801              LDR      r0,[sp,#4]            ;612
0000ea  b160              CBZ      r0,|L12.262|
0000ec  4639              MOV      r1,r7                 ;614
0000ee  f20d1013          ADD      r0,sp,#0x113          ;614
0000f2  f7fffffe          BL       Cal_CRC16
0000f6  4605              MOV      r5,r0                 ;614
0000f8  1228              ASRS     r0,r5,#8              ;615
0000fa  f7fffffe          BL       Send_Byte
0000fe  b2e8              UXTB     r0,r5                 ;616
000100  f7fffffe          BL       Send_Byte
000104  e008              B        |L12.280|
                  |L12.262|
000106  4639              MOV      r1,r7                 ;620
000108  f20d1013          ADD      r0,sp,#0x113          ;620
00010c  f7fffffe          BL       CalChecksum
000110  9003              STR      r0,[sp,#0xc]          ;620
000112  9803              LDR      r0,[sp,#0xc]          ;621
000114  f7fffffe          BL       Send_Byte
                  |L12.280|
000118  4954              LDR      r1,|L12.620|
00011a  a802              ADD      r0,sp,#8              ;625
00011c  f7fffffe          BL       Receive_Byte
000120  b9c0              CBNZ     r0,|L12.340|
000122  f89d0008          LDRB     r0,[sp,#8]            ;625
000126  2806              CMP      r0,#6                 ;625
000128  d114              BNE      |L12.340|
00012a  f04f0801          MOV      r8,#1                 ;627
00012e  45b9              CMP      r9,r7                 ;629
000130  d90c              BLS      |L12.332|
000132  44bb              ADD      r11,r11,r7            ;631
000134  eba90907          SUB      r9,r9,r7              ;632
000138  f5ba7f70          CMP      r10,#0x3c0            ;633
00013c  d101              BNE      |L12.322|
00013e  20ff              MOVS     r0,#0xff              ;635
000140  e7ad              B        |L12.158|
                  |L12.322|
000142  f10a0001          ADD      r0,r10,#1             ;639
000146  fa1ffa80          UXTH     r10,r0                ;639
00014a  e004              B        |L12.342|
                  |L12.332|
00014c  44bb              ADD      r11,r11,r7            ;644
00014e  f04f0900          MOV      r9,#0                 ;645
000152  e000              B        |L12.342|
                  |L12.340|
000154  1c64              ADDS     r4,r4,#1              ;650
                  |L12.342|
000156  f1b80f00          CMP      r8,#0                 ;653
00015a  d101              BNE      |L12.352|
00015c  2c0a              CMP      r4,#0xa               ;653
00015e  d3b7              BCC      |L12.208|
                  |L12.352|
000160  2c0a              CMP      r4,#0xa               ;656
000162  d301              BCC      |L12.360|
000164  b2e0              UXTB     r0,r4                 ;658
000166  e79a              B        |L12.158|
                  |L12.360|
000168  f1b90f00          CMP      r9,#0                 ;590
00016c  d1a2              BNE      |L12.180|
00016e  f04f0800          MOV      r8,#0                 ;662
000172  2000              MOVS     r0,#0                 ;663
000174  f88d0008          STRB     r0,[sp,#8]            ;663
000178  2400              MOVS     r4,#0                 ;664
00017a  bf00              NOP                            ;665
                  |L12.380|
00017c  2004              MOVS     r0,#4                 ;667
00017e  f7fffffe          BL       Send_Byte
000182  f2427110          MOV      r1,#0x2710            ;671
000186  a802              ADD      r0,sp,#8              ;671
000188  f7fffffe          BL       Receive_Byte
00018c  b930              CBNZ     r0,|L12.412|
00018e  f89d0008          LDRB     r0,[sp,#8]            ;671
000192  2806              CMP      r0,#6                 ;671
000194  d102              BNE      |L12.412|
000196  f04f0801          MOV      r8,#1                 ;673
00019a  e000              B        |L12.414|
                  |L12.412|
00019c  1c64              ADDS     r4,r4,#1              ;677
                  |L12.414|
00019e  f1b80f00          CMP      r8,#0                 ;680
0001a2  d101              BNE      |L12.424|
0001a4  2c0a              CMP      r4,#0xa               ;680
0001a6  d3e9              BCC      |L12.380|
                  |L12.424|
0001a8  2c0a              CMP      r4,#0xa               ;683
0001aa  d301              BCC      |L12.432|
0001ac  b2e0              UXTB     r0,r4                 ;685
0001ae  e776              B        |L12.158|
                  |L12.432|
0001b0  f04f0800          MOV      r8,#0                 ;689
0001b4  2000              MOVS     r0,#0                 ;690
0001b6  f88d0008          STRB     r0,[sp,#8]            ;690
0001ba  2400              MOVS     r4,#0                 ;691
0001bc  2001              MOVS     r0,#1                 ;693
0001be  f88d0110          STRB     r0,[sp,#0x110]        ;693
0001c2  2000              MOVS     r0,#0                 ;694
0001c4  f88d0111          STRB     r0,[sp,#0x111]        ;694
0001c8  20ff              MOVS     r0,#0xff              ;695
0001ca  f88d0112          STRB     r0,[sp,#0x112]        ;695
0001ce  2603              MOVS     r6,#3                 ;698
0001d0  e004              B        |L12.476|
                  |L12.466|
0001d2  2000              MOVS     r0,#0                 ;700
0001d4  a944              ADD      r1,sp,#0x110          ;700
0001d6  5588              STRB     r0,[r1,r6]            ;700
0001d8  1c70              ADDS     r0,r6,#1              ;698
0001da  b2c6              UXTB     r6,r0                 ;698
                  |L12.476|
0001dc  2e83              CMP      r6,#0x83              ;698
0001de  dbf8              BLT      |L12.466|
0001e0  bf00              NOP                            ;703
                  |L12.482|
0001e2  2183              MOVS     r1,#0x83              ;706
0001e4  a844              ADD      r0,sp,#0x110          ;706
0001e6  f7fffffe          BL       Ymodem_SendPacket
0001ea  2180              MOVS     r1,#0x80              ;709
0001ec  f20d1013          ADD      r0,sp,#0x113          ;709
0001f0  f7fffffe          BL       Cal_CRC16
0001f4  4605              MOV      r5,r0                 ;709
0001f6  1228              ASRS     r0,r5,#8              ;710
0001f8  f7fffffe          BL       Send_Byte
0001fc  b2e8              UXTB     r0,r5                 ;711
0001fe  f7fffffe          BL       Send_Byte
000202  f2427110          MOV      r1,#0x2710            ;714
000206  a802              ADD      r0,sp,#8              ;714
000208  f7fffffe          BL       Receive_Byte
00020c  b930              CBNZ     r0,|L12.540|
00020e  f89d0008          LDRB     r0,[sp,#8]            ;716
000212  2806              CMP      r0,#6                 ;716
000214  d103              BNE      |L12.542|
000216  f04f0801          MOV      r8,#1                 ;719
00021a  e000              B        |L12.542|
                  |L12.540|
00021c  1c64              ADDS     r4,r4,#1              ;724
                  |L12.542|
00021e  f1b80f00          CMP      r8,#0                 ;726
000222  d101              BNE      |L12.552|
000224  2c0a              CMP      r4,#0xa               ;726
000226  d3dc              BCC      |L12.482|
                  |L12.552|
000228  2c0a              CMP      r4,#0xa               ;729
00022a  d301              BCC      |L12.560|
00022c  b2e0              UXTB     r0,r4                 ;731
00022e  e736              B        |L12.158|
                  |L12.560|
000230  bf00              NOP                            ;734
                  |L12.562|
000232  2004              MOVS     r0,#4                 ;736
000234  f7fffffe          BL       Send_Byte
000238  f2427110          MOV      r1,#0x2710            ;739
00023c  a802              ADD      r0,sp,#8              ;739
00023e  f7fffffe          BL       Receive_Byte
000242  b930              CBNZ     r0,|L12.594|
000244  f89d0008          LDRB     r0,[sp,#8]            ;739
000248  2806              CMP      r0,#6                 ;739
00024a  d102              BNE      |L12.594|
00024c  f04f0801          MOV      r8,#1                 ;741
000250  e000              B        |L12.596|
                  |L12.594|
000252  1c64              ADDS     r4,r4,#1              ;745
                  |L12.596|
000254  f1b80f00          CMP      r8,#0                 ;747
000258  d101              BNE      |L12.606|
00025a  2c0a              CMP      r4,#0xa               ;747
00025c  d3e9              BCC      |L12.562|
                  |L12.606|
00025e  2c0a              CMP      r4,#0xa               ;749
000260  d301              BCC      |L12.614|
000262  b2e0              UXTB     r0,r4                 ;751
000264  e71b              B        |L12.158|
                  |L12.614|
000266  2000              MOVS     r0,#0                 ;753
000268  e719              B        |L12.158|
;;;755    
                          ENDP

00026a  0000              DCW      0x0000
                  |L12.620|
                          DCD      0x000186a0

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\ymodem.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_ymodem_c_80b47e87____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_ymodem_c_80b47e87____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_ymodem_c_80b47e87____REVSH|
#line 144
|__asm___8_ymodem_c_80b47e87____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
