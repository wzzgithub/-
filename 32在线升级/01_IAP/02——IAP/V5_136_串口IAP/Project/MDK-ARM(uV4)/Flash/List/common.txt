; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\common.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\common.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\fonts -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX ..\..\User\common.c]
                          THUMB

                          AREA ||i.GetInputString||, CODE, READONLY, ALIGN=2

                  GetInputString PROC
;;;255    */
;;;256    void GetInputString (uint8_t * buffP)
000000  b570              PUSH     {r4-r6,lr}
;;;257    {
000002  4606              MOV      r6,r0
;;;258    	uint32_t bytes_read = 0;
000004  2500              MOVS     r5,#0
;;;259    	uint8_t c = 0;
000006  2400              MOVS     r4,#0
;;;260    	do
000008  bf00              NOP      
                  |L1.10|
;;;261    	{
;;;262    		c = GetKey();
00000a  f7fffffe          BL       GetKey
00000e  4604              MOV      r4,r0
;;;263    		if (c == '\r')
000010  2c0d              CMP      r4,#0xd
000012  d100              BNE      |L1.22|
;;;264    			break;
000014  e01a              B        |L1.76|
                  |L1.22|
;;;265    		
;;;266    		if (c == '\b') /* Backspace */
000016  2c08              CMP      r4,#8
000018  d105              BNE      |L1.38|
;;;267    		{
;;;268    			if (bytes_read > 0)
00001a  b11d              CBZ      r5,|L1.36|
;;;269    			{
;;;270    			SerialPutString("\b \b");
00001c  a00f              ADR      r0,|L1.92|
00001e  f7fffffe          BL       Serial_PutString
;;;271    			bytes_read --;
000022  1e6d              SUBS     r5,r5,#1
                  |L1.36|
;;;272    			}
;;;273    			continue;
000024  e011              B        |L1.74|
                  |L1.38|
;;;274    		}
;;;275    		
;;;276    		if (bytes_read >= CMD_STRING_SIZE )
000026  2d80              CMP      r5,#0x80
000028  d304              BCC      |L1.52|
;;;277    		{
;;;278    			SerialPutString("Command string size overflow\r\n");
00002a  a00d              ADR      r0,|L1.96|
00002c  f7fffffe          BL       Serial_PutString
;;;279    			bytes_read = 0;
000030  2500              MOVS     r5,#0
;;;280    			continue;
000032  e00a              B        |L1.74|
                  |L1.52|
;;;281    		}
;;;282    		
;;;283    		if (c >= 0x20 && c <= 0x7E)
000034  2c20              CMP      r4,#0x20
000036  db07              BLT      |L1.72|
000038  2c7e              CMP      r4,#0x7e
00003a  dc05              BGT      |L1.72|
;;;284    		{
;;;285    			buffP[bytes_read++] = c;
00003c  4628              MOV      r0,r5
00003e  1c6d              ADDS     r5,r5,#1
000040  5434              STRB     r4,[r6,r0]
;;;286    			SerialPutChar(c);
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       SerialPutChar
                  |L1.72|
000048  bf00              NOP                            ;273
                  |L1.74|
;;;287    		}
;;;288    	}
;;;289    	while (1);
00004a  e7de              B        |L1.10|
                  |L1.76|
00004c  bf00              NOP                            ;264
;;;290    	SerialPutString(("\n\r"));
00004e  a00c              ADR      r0,|L1.128|
000050  f7fffffe          BL       Serial_PutString
;;;291    	buffP[bytes_read] = '\0';
000054  2000              MOVS     r0,#0
000056  5570              STRB     r0,[r6,r5]
;;;292    }
000058  bd70              POP      {r4-r6,pc}
;;;293    
                          ENDP

00005a  0000              DCW      0x0000
                  |L1.92|
00005c  08200800          DCB      "\b \b",0
                  |L1.96|
000060  436f6d6d          DCB      "Command string size overflow\r\n",0
000064  616e6420
000068  73747269
00006c  6e672073
000070  697a6520
000074  6f766572
000078  666c6f77
00007c  0d0a00  
00007f  00                DCB      0
                  |L1.128|
000080  0a0d00            DCB      "\n\r",0
000083  00                DCB      0

                          AREA ||i.GetIntegerInput||, CODE, READONLY, ALIGN=2

                  GetIntegerInput PROC
;;;148    */
;;;149    uint32_t GetIntegerInput(int32_t * num)
000000  b51f              PUSH     {r0-r4,lr}
;;;150    {
000002  4604              MOV      r4,r0
;;;151    	uint8_t inputstr[16];
;;;152    
;;;153    	while (1)
000004  e023              B        |L2.78|
                  |L2.6|
;;;154    	{
;;;155    		GetInputString(inputstr);
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       GetInputString
;;;156    		if (inputstr[0] == '\0') continue;
00000c  f89d0000          LDRB     r0,[sp,#0]
000010  b900              CBNZ     r0,|L2.20|
000012  e01c              B        |L2.78|
                  |L2.20|
;;;157    		if ((inputstr[0] == 'a' || inputstr[0] == 'A') && inputstr[1] == '\0')
000014  f89d0000          LDRB     r0,[sp,#0]
000018  2861              CMP      r0,#0x61
00001a  d003              BEQ      |L2.36|
00001c  f89d0000          LDRB     r0,[sp,#0]
000020  2841              CMP      r0,#0x41
000022  d108              BNE      |L2.54|
                  |L2.36|
000024  f89d0001          LDRB     r0,[sp,#1]
000028  b928              CBNZ     r0,|L2.54|
;;;158    		{
;;;159    			SerialPutString("User Cancelled \r\n");
00002a  a009              ADR      r0,|L2.80|
00002c  f7fffffe          BL       Serial_PutString
;;;160    			return 0;
000030  2000              MOVS     r0,#0
                  |L2.50|
;;;161    		}
;;;162    
;;;163    		if (Str2Int(inputstr, num) == 0)
;;;164    		{
;;;165    			SerialPutString("Error, Input again: \r\n");
;;;166    		}
;;;167    		else
;;;168    		{
;;;169    			return 1;
;;;170    		}
;;;171    	}
;;;172    }
000032  b004              ADD      sp,sp,#0x10
000034  bd10              POP      {r4,pc}
                  |L2.54|
000036  4621              MOV      r1,r4                 ;163
000038  4668              MOV      r0,sp                 ;163
00003a  f7fffffe          BL       Str2Int
00003e  b918              CBNZ     r0,|L2.72|
000040  a008              ADR      r0,|L2.100|
000042  f7fffffe          BL       Serial_PutString
000046  e001              B        |L2.76|
                  |L2.72|
000048  2001              MOVS     r0,#1                 ;169
00004a  e7f2              B        |L2.50|
                  |L2.76|
00004c  bf00              NOP                            ;156
                  |L2.78|
00004e  e7da              B        |L2.6|
;;;173    
                          ENDP

                  |L2.80|
000050  55736572          DCB      "User Cancelled \r\n",0
000054  2043616e
000058  63656c6c
00005c  6564200d
000060  0a00    
000062  00                DCB      0
000063  00                DCB      0
                  |L2.100|
000064  4572726f          DCB      "Error, Input again: \r\n",0
000068  722c2049
00006c  6e707574
000070  20616761
000074  696e3a20
000078  0d0a00  
00007b  00                DCB      0

                          AREA ||i.GetKey||, CODE, READONLY, ALIGN=1

                  GetKey PROC
;;;202    */
;;;203    uint8_t GetKey(void)
000000  b508              PUSH     {r3,lr}
;;;204    {
;;;205    	uint8_t key = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;206    
;;;207    	/* 等待用户输入 */
;;;208    	while (1)
000006  e004              B        |L3.18|
                  |L3.8|
;;;209    	{
;;;210    		if (SerialKeyPressed((uint8_t*)&key)) break;
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       SerialKeyPressed
00000e  b100              CBZ      r0,|L3.18|
000010  e000              B        |L3.20|
                  |L3.18|
000012  e7f9              B        |L3.8|
                  |L3.20|
000014  bf00              NOP      
;;;211    	}
;;;212    	return key;
000016  f89d0000          LDRB     r0,[sp,#0]
;;;213    }
00001a  bd08              POP      {r3,pc}
;;;214    
                          ENDP


                          AREA ||i.Int2Str||, CODE, READONLY, ALIGN=2

                  Int2Str PROC
;;;26     */
;;;27     void Int2Str(uint8_t* str, int32_t intnum)
000000  b5f0              PUSH     {r4-r7,lr}
;;;28     {
;;;29     	uint32_t i, Div = 1000000000, j = 0, Status = 0;
000002  4a14              LDR      r2,|L4.84|
000004  2500              MOVS     r5,#0
000006  2400              MOVS     r4,#0
;;;30     
;;;31     	for (i = 0; i < 10; i++)
000008  2300              MOVS     r3,#0
00000a  e020              B        |L4.78|
                  |L4.12|
;;;32     	{
;;;33     		str[j++] = (intnum / Div) + 48;
00000c  fbb1f6f2          UDIV     r6,r1,r2
000010  3630              ADDS     r6,r6,#0x30
000012  f0060cff          AND      r12,r6,#0xff
000016  462e              MOV      r6,r5
000018  1c6d              ADDS     r5,r5,#1
00001a  f800c006          STRB     r12,[r0,r6]
;;;34     
;;;35     		intnum = intnum % Div;
00001e  fbb1f6f2          UDIV     r6,r1,r2
000022  fb021116          MLS      r1,r2,r6,r1
;;;36     		Div /= 10;
000026  260a              MOVS     r6,#0xa
000028  fbb2f2f6          UDIV     r2,r2,r6
;;;37     		if ((str[j-1] == '0') & (Status == 0))
00002c  1e6e              SUBS     r6,r5,#1
00002e  5d86              LDRB     r6,[r0,r6]
000030  2e30              CMP      r6,#0x30
000032  d101              BNE      |L4.56|
000034  2601              MOVS     r6,#1
000036  e000              B        |L4.58|
                  |L4.56|
000038  2600              MOVS     r6,#0
                  |L4.58|
00003a  b90c              CBNZ     r4,|L4.64|
00003c  2701              MOVS     r7,#1
00003e  e000              B        |L4.66|
                  |L4.64|
000040  2700              MOVS     r7,#0
                  |L4.66|
000042  403e              ANDS     r6,r6,r7
000044  b10e              CBZ      r6,|L4.74|
;;;38     		{
;;;39     			j = 0;
000046  2500              MOVS     r5,#0
000048  e000              B        |L4.76|
                  |L4.74|
;;;40     		}
;;;41     		else
;;;42     		{
;;;43     			Status++;
00004a  1c64              ADDS     r4,r4,#1
                  |L4.76|
00004c  1c5b              ADDS     r3,r3,#1              ;31
                  |L4.78|
00004e  2b0a              CMP      r3,#0xa               ;31
000050  d3dc              BCC      |L4.12|
;;;44     		}
;;;45     	}
;;;46     }
000052  bdf0              POP      {r4-r7,pc}
;;;47     
                          ENDP

                  |L4.84|
                          DCD      0x3b9aca00

                          AREA ||i.SerialKeyPressed||, CODE, READONLY, ALIGN=2

                  SerialKeyPressed PROC
;;;181    */
;;;182    uint32_t SerialKeyPressed(uint8_t *key)
000000  b510              PUSH     {r4,lr}
;;;183    {
000002  4604              MOV      r4,r0
;;;184    	if ( USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != RESET)
000004  2120              MOVS     r1,#0x20
000006  4805              LDR      r0,|L5.28|
000008  f7fffffe          BL       USART_GetFlagStatus
00000c  b120              CBZ      r0,|L5.24|
;;;185    	{
;;;186    		*key = (uint8_t)USART1->DR;
00000e  4803              LDR      r0,|L5.28|
000010  8880              LDRH     r0,[r0,#4]
000012  7020              STRB     r0,[r4,#0]
;;;187    		return 1;
000014  2001              MOVS     r0,#1
                  |L5.22|
;;;188    	}
;;;189    	else
;;;190    	{
;;;191    		return 0;
;;;192    	}
;;;193    }
000016  bd10              POP      {r4,pc}
                  |L5.24|
000018  2000              MOVS     r0,#0                 ;191
00001a  e7fc              B        |L5.22|
;;;194    
                          ENDP

                  |L5.28|
                          DCD      0x40011000

                          AREA ||i.SerialPutChar||, CODE, READONLY, ALIGN=2

                  SerialPutChar PROC
;;;222    */
;;;223    void SerialPutChar(uint8_t c)
000000  b510              PUSH     {r4,lr}
;;;224    {
000002  4604              MOV      r4,r0
;;;225    	USART_SendData(USART1, c);
000004  4621              MOV      r1,r4
000006  4805              LDR      r0,|L6.28|
000008  f7fffffe          BL       USART_SendData
;;;226    	while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)
00000c  bf00              NOP      
                  |L6.14|
00000e  2180              MOVS     r1,#0x80
000010  4802              LDR      r0,|L6.28|
000012  f7fffffe          BL       USART_GetFlagStatus
000016  2800              CMP      r0,#0
000018  d0f9              BEQ      |L6.14|
;;;227    	{
;;;228    	}
;;;229    }
00001a  bd10              POP      {r4,pc}
;;;230    
                          ENDP

                  |L6.28|
                          DCD      0x40011000

                          AREA ||i.Serial_PutString||, CODE, READONLY, ALIGN=1

                  Serial_PutString PROC
;;;238    */
;;;239    void Serial_PutString(uint8_t *s)
000000  b510              PUSH     {r4,lr}
;;;240    {
000002  4604              MOV      r4,r0
;;;241    	while (*s != '\0')
000004  e003              B        |L7.14|
                  |L7.6|
;;;242    	{
;;;243    		SerialPutChar(*s);
000006  7820              LDRB     r0,[r4,#0]
000008  f7fffffe          BL       SerialPutChar
;;;244    		s++;
00000c  1c64              ADDS     r4,r4,#1
                  |L7.14|
00000e  7820              LDRB     r0,[r4,#0]            ;241
000010  2800              CMP      r0,#0                 ;241
000012  d1f8              BNE      |L7.6|
;;;245    	}
;;;246    }
000014  bd10              POP      {r4,pc}
;;;247    
                          ENDP


                          AREA ||i.Str2Int||, CODE, READONLY, ALIGN=1

                  Str2Int PROC
;;;55     */
;;;56     uint32_t Str2Int(uint8_t *inputstr, int32_t *intnum)
000000  b570              PUSH     {r4-r6,lr}
;;;57     {
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;58     	uint32_t i = 0, res = 0;
000006  2100              MOVS     r1,#0
000008  2500              MOVS     r5,#0
;;;59     	uint32_t val = 0;
00000a  2300              MOVS     r3,#0
;;;60     
;;;61     	if (inputstr[0] == '0' && (inputstr[1] == 'x' || inputstr[1] == 'X'))
00000c  7810              LDRB     r0,[r2,#0]
00000e  2830              CMP      r0,#0x30
000010  d143              BNE      |L8.154|
000012  7850              LDRB     r0,[r2,#1]
000014  2878              CMP      r0,#0x78
000016  d002              BEQ      |L8.30|
000018  7850              LDRB     r0,[r2,#1]
00001a  2858              CMP      r0,#0x58
00001c  d13d              BNE      |L8.154|
                  |L8.30|
;;;62     	{
;;;63     		if (inputstr[2] == '\0')
00001e  7890              LDRB     r0,[r2,#2]
000020  b908              CBNZ     r0,|L8.38|
;;;64     		{
;;;65     			return 0;
000022  2000              MOVS     r0,#0
                  |L8.36|
;;;66     		}
;;;67     		
;;;68     		for (i = 2; i < 11; i++)
;;;69     		{
;;;70     			if (inputstr[i] == '\0')
;;;71     			{
;;;72     				*intnum = val;
;;;73     				/* return 1; */
;;;74     				res = 1;
;;;75     				break;
;;;76     			}
;;;77     			
;;;78     			if (ISVALIDHEX(inputstr[i]))
;;;79     			{
;;;80     				val = (val << 4) + CONVERTHEX(inputstr[i]);
;;;81     			}
;;;82     			else
;;;83     			{
;;;84     				/* Return 0, Invalid input */
;;;85     				res = 0;
;;;86     				break;
;;;87     			}
;;;88     		}
;;;89     		/* Over 8 digit hex --invalid */
;;;90     		if (i >= 11)
;;;91     		{
;;;92     			res = 0;
;;;93     		}
;;;94     	}
;;;95     	else /* max 10-digit decimal input */
;;;96     	{
;;;97     		for (i = 0;i < 11;i++)
;;;98     		{
;;;99     			if (inputstr[i] == '\0')
;;;100    			{
;;;101    				*intnum = val;
;;;102    				/* return 1 */
;;;103    				res = 1;
;;;104    				break;
;;;105    			}
;;;106    			else if ((inputstr[i] == 'k' || inputstr[i] == 'K') && (i > 0))
;;;107    			{
;;;108    				val = val << 10;
;;;109    				*intnum = val;
;;;110    				res = 1;
;;;111    				break;
;;;112    			}
;;;113    			else if ((inputstr[i] == 'm' || inputstr[i] == 'M') && (i > 0))
;;;114    			{
;;;115    				val = val << 20;
;;;116    				*intnum = val;
;;;117    				res = 1;
;;;118    				break;
;;;119    			}
;;;120    			else if (ISVALIDDEC(inputstr[i]))
;;;121    			{
;;;122    				val = val * 10 + CONVERTDEC(inputstr[i]);
;;;123    			}
;;;124    			else
;;;125    			{
;;;126    				/* return 0, Invalid input */
;;;127    				res = 0;
;;;128    				break;
;;;129    			}
;;;130    		}
;;;131    		/* Over 10 digit decimal --invalid */
;;;132    		if (i >= 11)
;;;133    		{
;;;134    			res = 0;
;;;135    		}
;;;136    	}
;;;137    
;;;138    	return res;
;;;139    }
000024  bd70              POP      {r4-r6,pc}
                  |L8.38|
000026  2102              MOVS     r1,#2                 ;68
000028  e030              B        |L8.140|
                  |L8.42|
00002a  5c50              LDRB     r0,[r2,r1]            ;70
00002c  b910              CBNZ     r0,|L8.52|
00002e  6023              STR      r3,[r4,#0]            ;72
000030  2501              MOVS     r5,#1                 ;74
000032  e02d              B        |L8.144|
                  |L8.52|
000034  5c50              LDRB     r0,[r2,r1]            ;78
000036  2841              CMP      r0,#0x41              ;78
000038  db02              BLT      |L8.64|
00003a  5c50              LDRB     r0,[r2,r1]            ;78
00003c  2846              CMP      r0,#0x46              ;78
00003e  dd0b              BLE      |L8.88|
                  |L8.64|
000040  5c50              LDRB     r0,[r2,r1]            ;78
000042  2861              CMP      r0,#0x61              ;78
000044  db02              BLT      |L8.76|
000046  5c50              LDRB     r0,[r2,r1]            ;78
000048  2866              CMP      r0,#0x66              ;78
00004a  dd05              BLE      |L8.88|
                  |L8.76|
00004c  5c50              LDRB     r0,[r2,r1]            ;78
00004e  2830              CMP      r0,#0x30              ;78
000050  db19              BLT      |L8.134|
000052  5c50              LDRB     r0,[r2,r1]            ;78
000054  2839              CMP      r0,#0x39              ;78
000056  dc16              BGT      |L8.134|
                  |L8.88|
000058  5c50              LDRB     r0,[r2,r1]            ;80
00005a  2830              CMP      r0,#0x30              ;80
00005c  db05              BLT      |L8.106|
00005e  5c50              LDRB     r0,[r2,r1]            ;80
000060  2839              CMP      r0,#0x39              ;80
000062  dc02              BGT      |L8.106|
000064  5c50              LDRB     r0,[r2,r1]            ;80
000066  3830              SUBS     r0,r0,#0x30           ;80
000068  e00a              B        |L8.128|
                  |L8.106|
00006a  5c50              LDRB     r0,[r2,r1]            ;80
00006c  2841              CMP      r0,#0x41              ;80
00006e  db05              BLT      |L8.124|
000070  5c50              LDRB     r0,[r2,r1]            ;80
000072  2846              CMP      r0,#0x46              ;80
000074  dc02              BGT      |L8.124|
000076  5c50              LDRB     r0,[r2,r1]            ;80
000078  3837              SUBS     r0,r0,#0x37           ;80
00007a  e001              B        |L8.128|
                  |L8.124|
00007c  5c50              LDRB     r0,[r2,r1]            ;80
00007e  3857              SUBS     r0,r0,#0x57           ;80
                  |L8.128|
000080  eb001303          ADD      r3,r0,r3,LSL #4       ;80
000084  e001              B        |L8.138|
                  |L8.134|
000086  2500              MOVS     r5,#0                 ;85
000088  e002              B        |L8.144|
                  |L8.138|
00008a  1c49              ADDS     r1,r1,#1              ;68
                  |L8.140|
00008c  290b              CMP      r1,#0xb               ;68
00008e  d3cc              BCC      |L8.42|
                  |L8.144|
000090  bf00              NOP                            ;75
000092  290b              CMP      r1,#0xb               ;90
000094  d334              BCC      |L8.256|
000096  2500              MOVS     r5,#0                 ;92
000098  e032              B        |L8.256|
                  |L8.154|
00009a  2100              MOVS     r1,#0                 ;97
00009c  e02a              B        |L8.244|
                  |L8.158|
00009e  5c50              LDRB     r0,[r2,r1]            ;99
0000a0  b910              CBNZ     r0,|L8.168|
0000a2  6023              STR      r3,[r4,#0]            ;101
0000a4  2501              MOVS     r5,#1                 ;103
0000a6  e027              B        |L8.248|
                  |L8.168|
0000a8  5c50              LDRB     r0,[r2,r1]            ;106
0000aa  286b              CMP      r0,#0x6b              ;106
0000ac  d002              BEQ      |L8.180|
0000ae  5c50              LDRB     r0,[r2,r1]            ;106
0000b0  284b              CMP      r0,#0x4b              ;106
0000b2  d104              BNE      |L8.190|
                  |L8.180|
0000b4  b119              CBZ      r1,|L8.190|
0000b6  029b              LSLS     r3,r3,#10             ;108
0000b8  6023              STR      r3,[r4,#0]            ;109
0000ba  2501              MOVS     r5,#1                 ;110
0000bc  e01c              B        |L8.248|
                  |L8.190|
0000be  5c50              LDRB     r0,[r2,r1]            ;113
0000c0  286d              CMP      r0,#0x6d              ;113
0000c2  d002              BEQ      |L8.202|
0000c4  5c50              LDRB     r0,[r2,r1]            ;113
0000c6  284d              CMP      r0,#0x4d              ;113
0000c8  d104              BNE      |L8.212|
                  |L8.202|
0000ca  b119              CBZ      r1,|L8.212|
0000cc  051b              LSLS     r3,r3,#20             ;115
0000ce  6023              STR      r3,[r4,#0]            ;116
0000d0  2501              MOVS     r5,#1                 ;117
0000d2  e011              B        |L8.248|
                  |L8.212|
0000d4  5c50              LDRB     r0,[r2,r1]            ;120
0000d6  2830              CMP      r0,#0x30              ;120
0000d8  db09              BLT      |L8.238|
0000da  5c50              LDRB     r0,[r2,r1]            ;120
0000dc  2839              CMP      r0,#0x39              ;120
0000de  dc06              BGT      |L8.238|
0000e0  5c50              LDRB     r0,[r2,r1]            ;122
0000e2  3830              SUBS     r0,r0,#0x30           ;122
0000e4  eb030683          ADD      r6,r3,r3,LSL #2       ;122
0000e8  eb000346          ADD      r3,r0,r6,LSL #1       ;122
0000ec  e001              B        |L8.242|
                  |L8.238|
0000ee  2500              MOVS     r5,#0                 ;127
0000f0  e002              B        |L8.248|
                  |L8.242|
0000f2  1c49              ADDS     r1,r1,#1              ;97
                  |L8.244|
0000f4  290b              CMP      r1,#0xb               ;97
0000f6  d3d2              BCC      |L8.158|
                  |L8.248|
0000f8  bf00              NOP                            ;104
0000fa  290b              CMP      r1,#0xb               ;132
0000fc  d300              BCC      |L8.256|
0000fe  2500              MOVS     r5,#0                 ;134
                  |L8.256|
000100  4628              MOV      r0,r5                 ;138
000102  e78f              B        |L8.36|
;;;140    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\common.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_common_c_Int2Str____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_common_c_Int2Str____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_common_c_Int2Str____REVSH|
#line 144
|__asm___8_common_c_Int2Str____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
