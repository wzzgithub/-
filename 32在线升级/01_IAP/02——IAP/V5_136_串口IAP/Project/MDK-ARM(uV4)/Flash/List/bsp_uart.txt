; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_uart.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_uart.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\fonts -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX ..\..\User\bsp_stm32f4xx\src\bsp_uart.c]
                          THUMB

                          AREA ||i.bsp_InitUart||, CODE, READONLY, ALIGN=2

                  bsp_InitUart PROC
;;;29     */
;;;30     void bsp_InitUart(void)
000000  b500              PUSH     {lr}
;;;31     {
000002  b087              SUB      sp,sp,#0x1c
;;;32     	GPIO_InitTypeDef GPIO_InitStructure;
;;;33     	USART_InitTypeDef USART_InitStructure;
;;;34     	
;;;35     	/* 串口1 TX = PA9   RX = PA10 */
;;;36     
;;;37     	/* 第1步： 配置GPIO */
;;;38     
;;;39     	/* 打开 GPIO 时钟 */
;;;40     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
000004  2101              MOVS     r1,#1
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;41     
;;;42     	/* 打开 UART 时钟 */
;;;43     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2010              MOVS     r0,#0x10
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;44     
;;;45     	/* 将 PA9 映射为 USART1_TX */
;;;46     	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
000014  2207              MOVS     r2,#7
000016  2109              MOVS     r1,#9
000018  481f              LDR      r0,|L1.152|
00001a  f7fffffe          BL       GPIO_PinAFConfig
;;;47     
;;;48     	/* 将 PA10 映射为 USART1_RX */
;;;49     	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
00001e  2207              MOVS     r2,#7
000020  210a              MOVS     r1,#0xa
000022  481d              LDR      r0,|L1.152|
000024  f7fffffe          BL       GPIO_PinAFConfig
;;;50     
;;;51     	/* 配置 USART Tx 为复用功能 */
;;;52     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
000028  2000              MOVS     r0,#0
00002a  f88d001a          STRB     r0,[sp,#0x1a]
;;;53     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
00002e  2001              MOVS     r0,#1
000030  f88d001b          STRB     r0,[sp,#0x1b]
;;;54     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
000034  2002              MOVS     r0,#2
000036  f88d0018          STRB     r0,[sp,#0x18]
;;;55     
;;;56     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
00003a  0200              LSLS     r0,r0,#8
00003c  9005              STR      r0,[sp,#0x14]
;;;57     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003e  2002              MOVS     r0,#2
000040  f88d0019          STRB     r0,[sp,#0x19]
;;;58     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000044  a905              ADD      r1,sp,#0x14
000046  4814              LDR      r0,|L1.152|
000048  f7fffffe          BL       GPIO_Init
;;;59     
;;;60     	/* 配置 USART Rx 为复用功能 */
;;;61     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00004c  2002              MOVS     r0,#2
00004e  f88d0018          STRB     r0,[sp,#0x18]
;;;62     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000052  0240              LSLS     r0,r0,#9
000054  9005              STR      r0,[sp,#0x14]
;;;63     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000056  a905              ADD      r1,sp,#0x14
000058  480f              LDR      r0,|L1.152|
00005a  f7fffffe          BL       GPIO_Init
;;;64     
;;;65     	/* 第2步： 配置串口硬件参数 */
;;;66     	USART_InitStructure.USART_BaudRate = 115200;	/* 波特率 */
00005e  f44f30e1          MOV      r0,#0x1c200
000062  9001              STR      r0,[sp,#4]
;;;67     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000064  2000              MOVS     r0,#0
000066  f8ad0008          STRH     r0,[sp,#8]
;;;68     	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00006a  f8ad000a          STRH     r0,[sp,#0xa]
;;;69     	USART_InitStructure.USART_Parity = USART_Parity_No ;
00006e  f8ad000c          STRH     r0,[sp,#0xc]
;;;70     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000072  f8ad0010          STRH     r0,[sp,#0x10]
;;;71     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000076  200c              MOVS     r0,#0xc
000078  f8ad000e          STRH     r0,[sp,#0xe]
;;;72     	USART_Init(USART1, &USART_InitStructure);
00007c  a901              ADD      r1,sp,#4
00007e  4807              LDR      r0,|L1.156|
000080  f7fffffe          BL       USART_Init
;;;73     
;;;74     	USART_Cmd(USART1, ENABLE);		/* 使能串口 */
000084  2101              MOVS     r1,#1
000086  4805              LDR      r0,|L1.156|
000088  f7fffffe          BL       USART_Cmd
;;;75     
;;;76     	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;77     		如下语句解决第1个字节无法正确发送出去的问题 */
;;;78     	USART_ClearFlag(USART1, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */   
00008c  2140              MOVS     r1,#0x40
00008e  4803              LDR      r0,|L1.156|
000090  f7fffffe          BL       USART_ClearFlag
;;;79     }
000094  b007              ADD      sp,sp,#0x1c
000096  bd00              POP      {pc}
;;;80     
                          ENDP

                  |L1.152|
                          DCD      0x40020000
                  |L1.156|
                          DCD      0x40011000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_bsp_uart_c_b28b0d00____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_bsp_uart_c_b28b0d00____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_bsp_uart_c_b28b0d00____REVSH|
#line 144
|__asm___10_bsp_uart_c_b28b0d00____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
